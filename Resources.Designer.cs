//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PuppeteerExtraSharp {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("PuppeteerExtraSharp.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to () =&gt; {
        ///console.warn(&apos;testtt&apos;);    
        ///  if (!window.chrome) {
        ///        // Use the exact property descriptor found in headful Chrome
        ///        // fetch it via `Object.getOwnPropertyDescriptor(window, &apos;chrome&apos;)`
        ///        Object.defineProperty(window, &apos;chrome&apos;, {
        ///          writable: true,
        ///          enumerable: true,
        ///          configurable: false, // note!
        ///          value: {} // We&apos;ll extend that later
        ///        })
        ///      }
        ///
        ///      // That means we&apos;re running headful and don&apos;t need to mock anything
        ///      if [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ChromeApp {
            get {
                return ResourceManager.GetString("ChromeApp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to () =&gt; {
        ///      /**
        ///       * Input might look funky, we need to normalize it so e.g. whitespace isn&apos;t an issue for our spoofing.
        ///       *
        ///       * @example
        ///       * video/webm; codecs=&quot;vp8, vorbis&quot;
        ///       * video/mp4; codecs=&quot;avc1.42E01E&quot;
        ///       * audio/x-m4a;
        ///       * audio/ogg; codecs=&quot;vorbis&quot;
        ///       * @param {String} arg
        ///       */
        ///      const parseInput = arg =&gt; {
        ///        const [mime, codecStr] = arg.trim().split(&apos;;&apos;)
        ///        let codecs = []
        ///        if (codecStr &amp;&amp; codecStr.includes(&apos;codecs=&quot; [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Codec {
            get {
                return ResourceManager.GetString("Codec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to const findRecap = () =&gt; {
        ///    if (typeof (___grecaptcha_cfg) !== &apos;undefined&apos;) {
        ///        let cs = []
        ///        for (let id in ___grecaptcha_cfg.clients) {
        ///            cs.push(id)
        ///        }
        ///        let res = cs.map(cid =&gt; {
        ///            for (let p in ___grecaptcha_cfg.clients[cid]) {
        ///                let c = {}
        ///                cid &gt;= 10000 ? c.version = &apos;V3&apos; : c.version = &apos;V2&apos;
        ///                let path = &quot;___grecaptcha_cfg.clients[&quot; + cid + &quot;].&quot; + p
        ///                let pp = eval(path)
        ///                i [rest of string was truncated]&quot;;.
        /// </summary>
        public static string FindRecaptchaScript {
            get {
                return ResourceManager.GetString("FindRecaptchaScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to () =&gt; {
        ///      try {
        ///        // Adds a contentWindow proxy to the provided iframe element
        ///        const addContentWindowProxy = iframe =&gt; {
        ///          const contentWindowProxy = {
        ///            get(target, key) {
        ///              // Now to the interesting part:
        ///              // We actually make this thing behave like a regular iframe window,
        ///              // by intercepting calls to e.g. `.self` and redirect it to the correct thing. :)
        ///              // That makes it possible for these assertions to be cor [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Frame {
            get {
                return ResourceManager.GetString("Frame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to () =&gt; {
        ///      const handler = {
        ///        apply: function(target, ctx, args) {
        ///          const param = (args || [])[0]
        ///
        ///          if (param &amp;&amp; param.name &amp;&amp; param.name === &apos;notifications&apos;) {
        ///            const result = { state: Notification.permission }
        ///            Object.setPrototypeOf(result, PermissionStatus.prototype)
        ///            return Promise.resolve(result)
        ///          }
        ///
        ///          return utils.cache.Reflect.apply(...arguments)
        ///        }
        ///      }
        ///
        ///      utils.replaceWithProxy(
        ///        windo [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Permissions {
            get {
                return ResourceManager.GetString("Permissions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to () =&gt; {
        ///              function mockPluginsAndMimeTypes () {
        ///                /* global MimeType MimeTypeArray PluginArray */
        ///
        ///                // Disguise custom functions as being native
        ///                const makeFnsNative = (fns = []) =&gt; {
        ///                  const oldCall = Function.prototype.call
        ///                  function call () {
        ///                    return oldCall.apply(this, arguments)
        ///                  }
        ///                  // eslint-disable-next-line
        ///                  Function.prototype.call  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string PluginEvasion {
            get {
                return ResourceManager.GetString("PluginEvasion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to () =&gt; {
        ///        if (!window.chrome) {
        ///          // Use the exact property descriptor found in headful Chrome
        ///          // fetch it via `Object.getOwnPropertyDescriptor(window, &apos;chrome&apos;)`
        ///          Object.defineProperty(window, &apos;chrome&apos;, {
        ///            writable: true,
        ///            enumerable: true,
        ///            configurable: false, // note!
        ///            value: {} // We&apos;ll extend that later
        ///          })
        ///        }
        ///
        ///        // That means we&apos;re running headful and don&apos;t need to mock anything
        ///        con [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Runtime {
            get {
                return ResourceManager.GetString("Runtime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to () =&gt; {
        ///      if (!window.chrome) {
        ///        // Use the exact property descriptor found in headful Chrome
        ///        // fetch it via `Object.getOwnPropertyDescriptor(window, &apos;chrome&apos;)`
        ///        Object.defineProperty(window, &apos;chrome&apos;, {
        ///          writable: true,
        ///          enumerable: true,
        ///          configurable: false, // note!
        ///          value: {} // We&apos;ll extend that later
        ///        })
        ///      }
        ///
        ///      // That means we&apos;re running headful and don&apos;t need to mock anything
        ///      if (&apos;csi&apos; in window.chrome) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string SCI {
            get {
                return ResourceManager.GetString("SCI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /**
        /// * A set of shared utility functions specifically for the purpose of modifying native browser APIs without leaving traces.
        /// *
        /// * Meant to be passed down in puppeteer and used in the context of the page (everything in here runs in NodeJS as well as a browser).
        /// *
        /// * Note: If for whatever reason you need to use this outside of `puppeteer-extra`:
        /// * Just remove the `module.exports` statement at the very bottom, the rest can be copy pasted into any browser context.
        /// *
        /// * Alternatively take a look at [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Utils {
            get {
                return ResourceManager.GetString("Utils", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to () =&gt; {
        ///      const getParameterProxyHandler = {
        ///        apply: function(target, ctx, args) {
        ///          const param = (args || [])[0]
        ///          // UNMASKED_VENDOR_WEBGL
        ///          if (param === 37445) {
        ///            &apos;Intel Inc.&apos; // default in headless: Google Inc.
        ///          }
        ///          // UNMASKED_RENDERER_WEBGL
        ///          if (param === 37446) {
        ///            &apos;Intel Iris OpenGL Engine&apos; // default in headless: Google SwiftShader
        ///          }
        ///          return utils.cache.Reflect.apply(target, ctx, args) [rest of string was truncated]&quot;;.
        /// </summary>
        public static string webGl {
            get {
                return ResourceManager.GetString("webGl", resourceCulture);
            }
        }
    }
}
